services:
  reverse-proxy:
    image: traefik:v2.11.2
    container_name: traefik
    hostname: traefik
    security_opt:
      - no-new-privileges:true
    restart: "always"
    ports:
      # Port 443 is used for HTTP trafic
      - "80:80"
      # Port 443 is used for HTTPS trafic
      - "443:443"
      # Port 8080 is used for traefik's own dashboard
#      - "8080:8080"
    environment:
      DOMAIN: "${DOMAIN}"
      TRAEFIK_DASHBOARD_USER: "${TRAEFIK_DASHBOARD_USER}"
      TRAEFIK_DASHBOARD_PWD: "${TRAEFIK_DASHBOARD_PWD}"
    depends_on:
      - docker-socket-proxy
    labels:
      # Enable this container to be mapped by traefik
      # For more information, see: https://docs.traefik.io/providers/docker/#exposedbydefault
      - "traefik.enable=true"
      # Define the network that should be used
      - "traefik.docker.network=proxy"

      # URL to reach logto container
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=https"
      - "traefik.http.routers.traefik.middlewares=traefikDashboardAuth@file,securityHeaders@file,enableWebsocket@file"
      # Activation of TLS
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.domains[0].main=${DOMAIN}"
      - "traefik.http.routers.traefik.tls.domains[0].sans=*.${DOMAIN}"
    volumes:
      # The docker socket is mounted for auto-discovery of new services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Here is the mount traefik static configuration into the container
      - ${PWD}/infra/docker/ingress/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      # Here is the mount traefik dynamic configuration into the container
      - ${PWD}/infra/docker/ingress/traefik/fileConfig.yml:/etc/traefik/fileConfig.yml:ro
      # Here is the mount of the traefik basic-auth password
      - ${PWD}/infra/docker/ingress/traefik/htpasswd:/etc/traefik/htpasswd:ro
      # Here is the mount of the local ~/ssl directory
      - certs:/etc/ssl/traefik
    networks:
      # Attach the traefik container to the proxy network
      - proxy

  docker-socket-proxy:
    container_name: docker-socket-proxy
    image: tecnativa/docker-socket-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      # Attach the docker-socket-proxy container to the proxy network
      - proxy
    environment:
      CONTAINERS: 1
      POST: 0
    privileged: true
    restart: unless-stopped

  whoami:
    image: containous/whoami
    container_name: whoami
    security_opt:
      - no-new-privileges:true
    labels:
      # Enable this container to be mapped by traefik
      # For more information, see: https://docs.traefik.io/providers/docker/#exposedbydefault
      - "traefik.enable=true"
      # Define the network that should be used
      - "traefik.docker.network=proxy"

      # URL to reach whoami container
      - "traefik.http.routers.whoami.rule=Host(`whoami.${DOMAIN}`)"
      - "traefik.http.routers.whoami.middlewares=localDevHeaders@file"
      # Activation of TLS
      - "traefik.http.routers.whoami.tls=true"
      - "traefik.http.routers.whoami.entrypoints=https"
      - "traefik.http.routers.whoami.service=whoami"
      # If port is different than 80, use the following service:
      - "traefik.http.services.whoami.loadbalancer.server.port=80"
    networks:
      proxy:
        aliases:
          - "whoami.${DOMAIN}"


volumes:
  certs:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/infra/docker/ingress/ssl
      o: bind

# Make the externally created network "proxy" available as external
networks:
  proxy:
    external: true
